"""
Django settings for CarrineBlog project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# 用于绑定当前项目所在的绝对路径，项目中的所有文件都需要依赖此路径
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 密钥
SECRET_KEY = 'django-insecure-k*=&@f+$7y-b@25gg!1ap99a*8t_m9sc2_z@kx9m1xgjz&yz91'

# SECURITY WARNING: don't run with debug turned on in production!
# 调试模式
DEBUG = True
# 线上模式
# DEBUG = False

# 配置能够访问当前站点的域名
ALLOWED_HOSTS = ['*', '127.0.0.1']


# Application definition

# 已安装应用的列表
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
    'DjangoUeditor',
]

# 中间件
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 当前项目的根URL
ROOT_URLCONF = 'CarrineBlog.urls'


# 指定模板的配置信息，列表中每一个元素都是字典
TEMPLATES = [
    {
        # 制定了要用模板引擎的python路径
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 指定模板文件的存放路径,这里如果templates加上引号，会发生一些路由目录问题
        'APP_DIRS': True,  # 指定是否在安装应用中的templates目录中搜索所有模板文件
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'blog.views.global_variable',
            ],
        },
    },
]

# Django内置服务器将使用的WSGI应用程序对象的完整python路径
WSGI_APPLICATION = 'CarrineBlog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# 指定数据库配置信息
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'CarrineBlogdb',
        'USER': 'root',
        'PASSWORD': '20010807',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

# 支持插拔的密码验证器，且可以一次配置多个，Django通过这些内置组件来避免用户设置的密码强度不够的问题
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

# 语言配置项
LANGUAGE_CODE = 'zh-Hans'

# 服务端时区配置项
TIME_ZONE = 'Asia/ShangHai'

# 国际化配置
USE_I18N = True
# 本地化配置
# USE_L10N = True

# 时区的处理方式，设置为True时，存储到数据库的时间是世界时间'TUC'，设置为False时，表示对时区不敏感，并且让数据库时间符合本地时间
USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

# 静态资源的存放位置
STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),

]

# 文件上传路径
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
